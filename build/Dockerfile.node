# TODO: refactor commonality with base-node
FROM node:12-alpine3.10

LABEL maintainer="core-tech@better.com"

ENV NPM_CONFIG_PREFIX      "/npm"
ENV NPM_GLOBAL_PACKAGE_DIR ${NPM_CONFIG_PREFIX}"/lib/node_modules"

RUN mkdir ${NPM_CONFIG_PREFIX}

ENV NODE_RDKAFKA_INSTALL      ${NPM_GLOBAL_PACKAGE_DIR}"/node-rdkafka"
ENV NODE_RDKAFKA_VERSION_SPEC "^2.7.4"

# Install the base requirements for the build image: make, git, etc.
RUN  apk update                                                          \
  && apk add --no-cache                                                  \
      coreutils openssl curl make bash git docker lz4-dev cyrus-sasl-dev

# Database SSL certificates
COPY config/rds-combined-ca-bundle.pem config/redshift-ca-bundle.crt /tmp/
RUN :                                                                                                             \
  && mkdir -p /etc/ssl                                                                                            \
  && cp /tmp/rds-combined-ca-bundle.pem /tmp/redshift-ca-bundle.crt /etc/ssl                                      \
  && cd /tmp                                                                                                      \
  && csplit --elide-empty-files --quiet --prefix rds-crt rds-combined-ca-bundle.pem '/-BEGIN CERTIFICATE-/' '{*}' \
  && csplit --elide-empty-files --quiet --prefix rs-crt redshift-ca-bundle.crt      '/-BEGIN CERTIFICATE-/' '{*}' \
  && for c in /tmp/rds-crt*; do mv /$c /usr/local/share/ca-certificates/aws-rds-ca-$(basename $c).crt ; done      \
  && for c in /tmp/rs-crt* ; do mv /$c /usr/local/share/ca-certificates/redshift-ca-$(basename $c).crt; done      \
  && update-ca-certificates

# In so many words, install sops v3.3.1
RUN :                                                                                         \
  && curl -o sops -L https://github.com/mozilla/sops/releases/download/3.3.1/sops-3.3.1.linux \
  && sha1sum sops | grep af2fc3d3a29565b0d6a73249136965ffee62892f                             \
  && chmod +x sops                                                                            \
  && mv sops /usr/local/bin

#
# NOTE: npm's --unsafe-perm suppresses the "change user to nobody"
# behavior of running with --global, so that EACCESS errors don't occur
# during the process of trying to create directories and run 'node-gyp' to
# compile and install librdkafka as part of node-rdkafka. Within a Docker
# build container, this is an acceptable decision: we're buildling our
# application and its dependencies as 'root', and running as 'nobody'
# while attempting to do so causes lots of breakage. Note that this is NOT
# the same as _running_ our application as 'root', which is far less
# advisable. [0] [1] [2]
#
# [0]: https://docs.npmjs.com/misc/config#unsafe-perm
# [1]: https://stackoverflow.com/questions/44633419/no-access-permission-error-with-npm-global-install-on-docker-image/51796938#51796938
# [2]: https://github.com/npm/npm/issues/3849
#
RUN :                                                                 \
  && apk add --no-cache --virtual .rdkafka-build-deps                 \
      zlib-dev libc-dev linux-headers build-base musl-dev openssl-dev \
      python                                                          \
  && npm install                                                      \
      --unsafe-perm                                                   \
      --global                                                        \
      node-rdkafka@${NODE_RDKAFKA_VERSION_SPEC}                       \
  && apk del .rdkafka-build-deps

# Sanity-check that node-rdkafka was installed to the expected location
RUN &>/dev/null stat ${NODE_RDKAFKA_INSTALL}

# Save exact version to an env script that derived build images can source
RUN echo "export NODE_RDKAFKA_VERSION_EXACT="$(            \
    npm ls -global -parseable -long node-rdkafka           \
    # Get <pkg>@<version> from <path>:<pkg>@<version>:...? \
    | cut -d: -f2                                          \
    # Get <version> from <pkg>@<version>                   \
    | cut -d@ -f2                                          \
  ) > /etc/rdkafka-info.sourceme.sh

# node-rdkafka for event service dependents TODO: split out / parameterize
#
# NOTE: The node-rdkafka version specified by ${NODE_RDKAFKA_VERSION_SPEC}
# MUST ALSO SATISFY the version spec used by applications. Application
# containers should in fact test this, to make sure that the spec matches
# the version required my their version of @better/events according to
# `npx semver`. This check is done by try-use-prebuilt-node-rdkafka.sh.
#
COPY scripts/try-use-prebuilt-node-rdkafka.sh /usr/local/bin/
